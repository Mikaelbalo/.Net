@model Swedating.Entities.UserProfile
@using Swedating.Helpers;
@using Newtonsoft.Json;
@using Swedating.Enums;
@{
	ViewBag.Title = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";

}


@using (Html.BeginForm("Edit", "UserProfile"))
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.Id)
	<div class="form-profile">
		<h4>Create a profile to continue</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="col col-lg-4">
			<div class="form-group">
				@Html.Label("Username", new { @class = "control-label col-md-6" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.Label("First name", new { @class = "control-label col-md-6" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.Label("Last name", new { @class = "control-label col-md-6" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
				</div>
			</div>
			<div class="form-group">
				@Html.Label("Gender", new { @class = "control-label col-md-6" })
				<div class="col-md-10">
					@Html.DropDownList("GenderId",
					 (SelectList)ViewBag.Genders,
		 new { @class = "form-control" })
				</div>
			</div>
			<div class="form-group">
				@Html.Label("Birth date", htmlAttributes: new { @class = "control-label col-md-6" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
				</div>
			</div>
			<div class="form-group" >
				<div class="col col-md-12"><input id="btnSubmitProfile" type="submit" value="Edit" class="btn btn-primary" style="margin-top:15px !important" /></div>
			</div>
		</div>

	</div>
	

}

@section scripts {
	<script type="text/javascript">

		var urlEditProfile = '@Html.Raw(Url.Action("Edit", "UserProfile"))';
		var urlMyProfile = '@Html.Raw(Url.Action("MyProfile", "UserProfile"))';
		var urlValidateProfile = '@Html.Raw(Url.Action("ValidateProfile", "UserProfile"))';


	
		$('#UserName').attr("readonly", "readonly");
		$('#UserName').addClass('input-disabled');

		var date = new Date();

		date.setFullYear(date.getFullYear() - 18);
			$("#BirthDate").datepicker({
				format: "dd/mm/yyyy",
				autoclose: true,
				language: 'en',
				changeYear: true,
				changeMonth: true,
				 maxDate: date,

			});

        $("#BirthDate").datepicker('setDate', '@Model.BirthDate.ToShortDateString()');

	</script>
}
